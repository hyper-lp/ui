generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Waitlist {
  id            String   @id @default(cuid())
  twitterId     String   @unique
  twitterHandle String
  twitterName   String?
  twitterAvatar String?
  email         String?
  createdAt     DateTime @default(now())
  approved      Boolean  @default(false)
  position      Int      @default(autoincrement())
  referredBy    String?
  referralCount Int      @default(0)
}

model LPPosition {
  id                     String             @id @default(cuid())
  tokenId                String
  dex                    String
  ownerAddress           String
  walletId               String?
  poolAddress            String?
  positionManagerAddress String
  token0Address          String
  token1Address          String
  feeTier                Int
  tickLower              Int
  tickUpper              Int
  isActive               Boolean            @default(true)
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  wallet                 MonitoredWallet?   @relation("WalletPositions", fields: [walletId], references: [id])
  snapshots              PositionSnapshot[]

  @@unique([tokenId, dex, positionManagerAddress])
  @@index([ownerAddress])
  @@index([walletId])
  @@index([dex])
  @@index([token0Address, token1Address])
  @@index([isActive])
}

model PositionSnapshot {
  id               String     @id @default(cuid())
  positionId       String
  timestamp        DateTime   @default(now())
  liquidity        String
  token0Amount     Float
  token1Amount     Float
  token0Symbol     String
  token1Symbol     String
  token0Price      Float
  token1Price      Float
  totalValueUSD    Float
  unclaimedFees0   Float
  unclaimedFees1   Float
  unclaimedFeesUSD Float
  feeAPR           Float
  poolTick         Int
  poolSqrtPriceX96 String
  inRange          Boolean
  position         LPPosition @relation(fields: [positionId], references: [id], onDelete: Cascade)

  @@index([positionId])
  @@index([timestamp])
}

model MonitoredWallet {
  id             String          @id @default(cuid())
  address        String          @unique
  name           String?
  isActive       Boolean         @default(true)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  hedgePositions HedgePosition[]
  lpPositions    LPPosition[]    @relation("WalletPositions")

  @@index([isActive])
  @@index([address])
}

model HedgePosition {
  id                 String           @id @default(cuid())
  walletAddress      String
  walletId           String?
  asset              String
  size               Float
  notionalValue      Float
  entryPrice         Float
  markPrice          Float
  margin             Float
  leverage           Float
  unrealizedPnl      Float
  realizedPnl        Float            @default(0)
  fundingPaid        Float            @default(0)
  currentFundingRate Float
  isActive           Boolean          @default(true)
  openedAt           DateTime         @default(now())
  closedAt           DateTime?
  updatedAt          DateTime         @updatedAt
  wallet             MonitoredWallet? @relation(fields: [walletId], references: [id])
  snapshots          HedgeSnapshot[]

  @@index([walletAddress])
  @@index([walletId])
  @@index([asset])
  @@index([isActive])
}

model HedgeSnapshot {
  id              String        @id @default(cuid())
  hedgePositionId String
  timestamp       DateTime      @default(now())
  size            Float
  markPrice       Float
  notionalValue   Float
  margin          Float
  unrealizedPnl   Float
  fundingRate     Float
  fundingPaid     Float
  deltaExposure   Float
  hedgePosition   HedgePosition @relation(fields: [hedgePositionId], references: [id], onDelete: Cascade)

  @@index([hedgePositionId])
  @@index([timestamp])
}
